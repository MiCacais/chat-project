{"ast":null,"code":"var _jsxFileName = \"/Users/michellecacais/Projects/chat-project/frontend/src/components/Auth/AuthForm.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef, useContext } from 'react';\nimport AuthContext from '../../store/auth-context';\nimport { useHistory } from 'react-router-dom';\nimport classes from './AuthForm.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AuthForm = () => {\n  _s();\n\n  const history = useHistory();\n  const emailInputRef = useRef();\n  const nameInputRef = useRef();\n  const passwordInputRef = useRef();\n  const [isLogin, setIsLogin] = useState(true);\n  const authCtx = useContext(AuthContext);\n\n  const switchAuthModeHandler = () => {\n    setIsLogin(prevState => !prevState);\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    const enteredEmail = emailInputRef.current.value;\n    const enteredName = nameInputRef.current.value;\n    const enteredPassword = passwordInputRef.current.value;\n    let url;\n    let content = {\n      email: enteredEmail,\n      password: enteredPassword\n    };\n\n    if (isLogin) {\n      url = 'http://localhost:3000/auth/sign_in';\n    } else {\n      url = 'http://localhost:3000/auth';\n      content = { ...content,\n        name: enteredName\n      };\n    }\n\n    fetch(url, {\n      method: 'POST',\n      body: JSON.stringify(content),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      } else {\n        return res.json().then(data => {\n          let errorMessage = 'Authentication failed';\n\n          if (data && data.errors && data.errors.full_messages) {\n            errorMessage = data.errors.full_messages;\n          }\n\n          throw new Error(errorMessage);\n        });\n      }\n    }).then(data => {\n      authCtx.login(data.data.uid, data.data.user_id);\n      history.replace('/');\n    }).catch(err => {\n      alert(err.message);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.auth,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: isLogin ? 'Login' : 'Sign Up'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"Your Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          required: true,\n          ref: emailInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), !isLogin && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"name\",\n          children: \"Your Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"name\",\n          id: \"name\",\n          required: true,\n          ref: nameInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Your Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          required: true,\n          ref: passwordInputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          children: isLogin ? 'Login' : 'Create Account'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: classes.toggle,\n          onClick: switchAuthModeHandler,\n          children: isLogin ? 'Create new account' : 'Login with existing account'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthForm, \"vO1gKOTACFBPpC9dgiqPXA66IGw=\", false, function () {\n  return [useHistory];\n});\n\n_c = AuthForm;\nexport default AuthForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthForm\");","map":{"version":3,"sources":["/Users/michellecacais/Projects/chat-project/frontend/src/components/Auth/AuthForm.js"],"names":["useState","useRef","useContext","AuthContext","useHistory","classes","AuthForm","history","emailInputRef","nameInputRef","passwordInputRef","isLogin","setIsLogin","authCtx","switchAuthModeHandler","prevState","submitHandler","event","preventDefault","enteredEmail","current","value","enteredName","enteredPassword","url","content","email","password","name","fetch","method","body","JSON","stringify","headers","then","res","ok","json","data","errorMessage","errors","full_messages","Error","login","uid","user_id","replace","catch","err","alert","message","auth","control","actions","toggle"],"mappings":"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","sourcesContent":["import { useState, useRef, useContext } from 'react';\nimport AuthContext from '../../store/auth-context';\nimport { useHistory } from 'react-router-dom';\n\nimport classes from './AuthForm.module.css';\n\nconst AuthForm = () => {\n  const history = useHistory();\n  const emailInputRef = useRef();\n  const nameInputRef = useRef();\n  const passwordInputRef = useRef();\n\n  const [isLogin, setIsLogin] = useState(true);\n\n  const authCtx = useContext(AuthContext);\n\n  const switchAuthModeHandler = () => {\n    setIsLogin((prevState) => !prevState);\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    const enteredEmail = emailInputRef.current.value;\n    const enteredName = nameInputRef.current.value;\n    const enteredPassword = passwordInputRef.current.value;\n\n    let url;\n    let content = {\n      email: enteredEmail,\n      password: enteredPassword\n    }\n    if (isLogin) {\n      url = 'http://localhost:3000/auth/sign_in';\n    }else{\n      url = 'http://localhost:3000/auth';\n      content = {...content, name: enteredName}\n    }\n    fetch(url, {\n      method: 'POST',\n      body: JSON.stringify(content),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      } else {\n        return res.json().then(data => {\n          let errorMessage = 'Authentication failed';\n          if (data && data.errors && data.errors.full_messages) {\n            errorMessage = data.errors.full_messages;\n          }\n          throw new Error(errorMessage);\n        });\n      }\n    }).then((data) => {\n      authCtx.login(data.data.uid, data.data.user_id);\n      history.replace('/');\n    }).catch(err => {\n      alert(err.message);\n    });\n  }\n\n  return (\n    <section className={classes.auth}>\n      <h1>{isLogin ? 'Login' : 'Sign Up'}</h1>\n      <form onSubmit={submitHandler}>\n        <div className={classes.control}>\n          <label htmlFor='email'>Your Email</label>\n          <input type='email' id='email' required ref={emailInputRef}/>\n        </div>\n        {!isLogin && <div className={classes.control}>\n          <label htmlFor='name'>Your Name</label>\n          <input type='name' id='name' required ref={nameInputRef}/>\n        </div>}\n        <div className={classes.control}>\n          <label htmlFor='password'>Your Password</label>\n          <input type='password' id='password' required ref={passwordInputRef}/>\n        </div>\n        <div className={classes.actions}>\n          <button>{isLogin ? 'Login' : 'Create Account'}</button>\n          <button\n            type='button'\n            className={classes.toggle}\n            onClick={switchAuthModeHandler}\n          >\n            {isLogin ? 'Create new account' : 'Login with existing account'}\n          </button>\n        </div>\n      </form>\n    </section>\n  );\n};\n\nexport default AuthForm;\n"]},"metadata":{},"sourceType":"module"}