{"ast":null,"code":"var _jsxFileName = \"/Users/michellecacais/Downloads/authentication/src/components/Chat/Messages/Messages.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback, useContext } from 'react';\nimport AuthContext from '../../../store/auth-context';\nimport MessageList from './MessageList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Messages = props => {\n  _s();\n\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const roomCtx = useContext(AuthContext);\n  const openChatConnection = useCallback(async () => {\n    props.cableApp.room = props.cableApp.cable.subscriptions.create({\n      channel: 'RoomChannel',\n      room: roomCtx.roomId,\n      uid: roomCtx.token\n    }, {\n      received: updatedRoom => {\n        const data = JSON.stringify(updatedRoom.messages);\n        const transformedData = data.map(messageData => {\n          return {\n            id: messageData.id,\n            content: messageData.content,\n            user_id: messageData.user_id\n          };\n        });\n        setMessages(transformedData);\n      }\n    });\n  }, []);\n  useEffect(() => {\n    openChatConnection();\n  }, [openChatConnection]);\n  const fetchMessagesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const url = 'http://localhost:3000/rooms/' + roomCtx.roomId;\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Something went wrong!');\n      }\n\n      const data = await response.json();\n      const transformedData = data.messages.map(messageData => {\n        return {\n          id: messageData.id,\n          content: messageData.content,\n          user_id: messageData.user_id\n        };\n      });\n      setMessages(transformedData);\n    } catch (error) {\n      setError(error.message);\n    }\n\n    setIsLoading(false);\n  }, []);\n  useEffect(() => {\n    fetchMessagesHandler();\n  }, [fetchMessagesHandler]);\n\n  let content = /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"No messages yet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 17\n  }, this);\n\n  if (messages.length > 0) {\n    content = /*#__PURE__*/_jsxDEV(MessageList, {\n      messages: messages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 15\n    }, this);\n  }\n\n  if (error) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 15\n    }, this);\n  }\n\n  if (isLoading) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 15\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Messages\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), content]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Messages, \"QTxdeUoABu0hw+1pEMq6AREbsJA=\");\n\n_c = Messages;\nexport default Messages;\n\nvar _c;\n\n$RefreshReg$(_c, \"Messages\");","map":{"version":3,"sources":["/Users/michellecacais/Downloads/authentication/src/components/Chat/Messages/Messages.js"],"names":["React","useState","useEffect","useCallback","useContext","AuthContext","MessageList","Messages","props","messages","setMessages","isLoading","setIsLoading","error","setError","roomCtx","openChatConnection","cableApp","room","cable","subscriptions","create","channel","roomId","uid","token","received","updatedRoom","data","JSON","stringify","transformedData","map","messageData","id","content","user_id","fetchMessagesHandler","url","response","fetch","method","headers","ok","Error","json","message","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback, useContext } from 'react';\nimport AuthContext from '../../../store/auth-context';\nimport MessageList from './MessageList';\n\nconst Messages = props => {\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const roomCtx = useContext(AuthContext);\n\n  const openChatConnection = useCallback(async () => {\n    props.cableApp.room = props.cableApp.cable.subscriptions.create({\n      channel: 'RoomChannel',\n      room: roomCtx.roomId,\n      uid: roomCtx.token\n    },\n    {\n      received: (updatedRoom) => {\n        const data = JSON.stringify(updatedRoom.messages);\n        const transformedData = data.map((messageData) => {\n          return {\n            id: messageData.id,\n            content: messageData.content,\n            user_id: messageData.user_id,\n          };\n        });\n        setMessages(transformedData);\n      }\n    });\n  }, []);\n\n  useEffect(() => {\n    openChatConnection();\n  }, [openChatConnection]);\n\n  const fetchMessagesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const url = 'http://localhost:3000/rooms/' + roomCtx.roomId;\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      \n      if (!response.ok) {\n        throw new Error('Something went wrong!');\n      }\n\n      const data = await response.json();\n      const transformedData = data.messages.map((messageData) => {\n        return {\n          id: messageData.id,\n          content: messageData.content,\n          user_id: messageData.user_id,\n        };\n      });\n      setMessages(transformedData);\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsLoading(false);\n  }, []);\n\n  useEffect(() => {\n    fetchMessagesHandler();\n  }, [fetchMessagesHandler]);\n\n  let content = <p>No messages yet</p>;\n\n  if (messages.length > 0) {\n    content = <MessageList messages={messages}/>;\n  }\n\n  if (error) {\n    content = <p>{error}</p>;\n  }\n\n  if (isLoading) {\n    content = <p>Loading...</p>;\n  }\n  return (\n    <section>\n      <p>Messages</p>\n      {content}\n    </section>\n  );\n};\n\nexport default Messages;\n"]},"metadata":{},"sourceType":"module"}